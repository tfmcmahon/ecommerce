const mongoose = require('mongoose')
const crypto = require('crypto')
const uuidv1 = require('uuidv1')

//user
const userSchema = new mongoose.Schema(
    {
        name: {
            type: String,
            trim: true,
            maxlength: 32,
            required: true
        },
        email: {
            type: String,
            trim: true,
            unique: true,
            required: true
        },
        hashedPassword: {
            type: String,
            required: true
        },
        about: {
            type: String,
            trim: true
        },
        salt: String,
        role: {
            type: Number,
            default: 0
        },
        history: {
            type: Array,
            default: []
        }
    }, 
    { timestamps: true }
)

//virtual field for hashed password
userSchema
    .virtual('password')
    .set(function(password) {
        this._password = password //set temp password
        this.salt = uuidv1() //salt = string generated by uuid
        this.hashedPassword = this.encryptPassword(password) //has the password
    })
    .get(function() {
        return this._password
    })

//create method for encrypting
userSchema.methods = {
    //authenitaction method
    authenticate: function(text) {
        return this.encryptPassword(text) === this.hashedPassword
    },
    //password encryption method
    encryptPassword: function(password) {
        if (!password) return ''
        try {
            return crypto.createHmac('sha1', this.salt)
                         .update(password)
                         .digest('hex')
        } catch (err) {
            return ''
        }
    }
}

module.exports = mongoose.model('EcommerceUser', userSchema)